24/JAN/2022 - TUESDAY

1.----- Done the user Registration = DONE
2.----- Set up the mongoDB connection = DONE
3.----- Connect my server to the database = DONE
4.----- Some to user Login = DONE
5.----- Do authentication of the user = DONE
6.----- and latter authourization - only allow if the user have certain token then he can do all the event he need like different acccess he can do = DONE
7.----- if user login as an admin then we need to navigate him directly to the /admin content only = DONE

In your server-side middleware, check for the presence of the JWT token in the Authorization header and verify it using the jsonwebtoken package and the secret key. If the token is valid, proceed with the request. If it is not valid, return a 401 Unauthorized response.

6 FEB - MONDAY
TODOS :

1.0 : we need to give an access for admin in order to login after soon he register = NOT DONE - By making the status active only = DONE

2.0 : Integrate the stock part management API and make all the API'S It need = PROGRESS -Edit API of Stock Remain = DONE

2.1 : Work on Drug management All API's needed =DONE

3.0 : Fix the table of stock , drug and category =DONE

10 FEB 2023

2.2 : Work on User management All API's needed = done
3.1 : Design Up the Report Management section = not done

11 FEB 2023
1.1 : Integrate the search Functionality= Hafly done

14 FEB 2023
1.1 : Redux set up in my project to make the search functionality work well = DONE

1.2 : Impelement the same search functionality concept in this part of drug=done
remaining = user, category = done,

1.3 : Develop the report page and also implement the return stock activity it's UI

1.4 : Update the Dashboard page more simpler

1.5 print drug functionallity plus upload through excell sheet functionallity

<!-- Remaining things -->

1. API Refinement and integration
2. Customer management section remain = DONE
3. Doctor Section remain
4. Patient Registration section remain

<!-- FEB 22 DONE ALL THE UI OF ADMIN SECTION -->

1.API INTERGRATION OF ALL ADMIN SECTION IS REMAINING = THIS I WILL WORK ON IT UPTO 25TH OF THIS FEB I HOPE SO AND FINISH IT

<!-- This how i will INSHALLAH Do for this week task in intergration part -->

23th - Drug and Supplier API Integration
24th - Stock and Customer API Integration
25th - Invoice and User API Integration
26th - Reversal Notification UI and Dashboard UI

// const currentDrugs = drugs.slice(indexOfFirstdrug, indexOfLastdrug);

    // const searchDrug = useSelector((state) => state.drugsearch.searchDrug);
    // const searchResultDrug = useSelector((state) => state.drugsearch.searchResultDrug);
    // const drugsToRender = searchDrug ? searchResultDrug : currentDrugs;

20 MARCH

- OUT OF STOCK
- TOTAL PURCHASE PER DAY AND MONTH
- TOTAL SALES PER DAY AND MONTH
- SHOW OUT OF STOCK IN THE TABLE
- CHANGE THE DRUG TABLE WELL

<!-- LOGIN CODE -->

// login employee
router.post("/login", async (req, res) => {
try {
const employee = await Employee.findOne({
employeeId: req.body.employeeId,
});
if (!employee) {
return res.status(200).send({
message: "Employee not found",
success: false,
});
}
const isMatch = await bcrypt.compare(req.body.password, employee.password);
if (!isMatch) {
return res.status(200).send({
message: "Invalid password",
success: false,
});
}
if (employee.isApproved === false) {
return res.status(200).send({
message: "Your account is not approved yet",
success: false,
});
}

    const token = jwt.sign(
      { employeeId: employee._id },
      process.env.jwt_secret,
      { expiresIn: "24h" }
    );
    res.status(200).send({
      message: "Login successful",
      success: true,
      data: token,
    });

} catch (error) {
res.status(500).send({
message: error.message,
success: false,
});
}
});

<!-- aUTH MIDLLEWARE -->

const jwt = require("jsonwebtoken");

module.exports = (req, res, next) => {

    const token = req.headers.authorization.split(' ')[1];
    if(!token) return res.status(401).send({message: 'Access denied. No token provided.' , success: false});
    try {
        const decoded = jwt.verify(token, process.env.jwt_secret);
        req.body.employeeId = decoded.employeeId;
        next();
    } catch (error) {
        return res.status(500).send({message: 'Access denied. Invalid token.' , success: false});
    }

}

<!-- pUBLIC ROUTE CODE  -->

import axios from "axios";
import React, { useEffect } from "react";
import toast from "react-hot-toast";
import { useDispatch } from "react-redux";
import { ShowLoading, HideLoading } from "../redux/alerts.js";
import { SetEmployee } from "../redux/employees.js";
import DefaultLayout from "../components/DefaultLayout.js";
import { useNavigate } from "react-router-dom";

function PublicRoute(props) {
const navigate = useNavigate();

useEffect(() => {
if (localStorage.getItem("token")) {
navigate("/employee");
}
}, []);

return <>{props.children}</>;
}

export default PublicRoute;

<!-- Different users sign in  -->

if user.role === ''admin' = router.push('/admin)
else if(user.role === 'doctor') = router.push('doctor/appointement')
else if(user.role === 'monitor') = router.push('monitor/patient')
